{
  "version": 3,
  "sources": ["empty-module:~/utils/supabase.server", "../../../app/routes/_index.tsx", "../../../app/components/Column.tsx", "../../../app/components/TaskModal.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\_index.tsx\");\n  import.meta.hot.lastModified = \"1745792880725.2722\";\n}\n// REMIX HMR END\n\nimport { useEffect, useState } from \"react\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { supabase } from \"~/utils/supabase.server\"; // Server-side client\nimport { getSupabaseClient } from \"~/utils/supabase.client\";\nimport Column from \"~/components/Column\";\nimport TaskModal from \"~/components/TaskModal\";\nimport { json, redirect } from \"@remix-run/node\";\n// Loader to fetch initial data\nexport const loader = async () => {\n  try {\n    const {\n      data: columns,\n      error: columnError\n    } = await supabase.from(\"columns\").select(\"*\").order(\"position\");\n    if (columnError) throw new Error(`Columns fetch error: ${columnError.message}`);\n    const {\n      data: tasks,\n      error: taskError\n    } = await supabase.from('tasks').select('*').order('position');\n    if (taskError) throw new Error(`Tasks fetch error: ${taskError.message}`);\n    return json({\n      columns,\n      tasks\n    });\n  } catch (error) {\n    console.error('Loader Error:', error.message);\n    throw new Response(error.message, {\n      status: 500\n    });\n  }\n};\nexport async function action({\n  request\n}) {\n  const supabase = getSupabaseClient();\n  const formData = await request.formData();\n  const id = formData.get(\"id\");\n  const title = formData.get(\"title\");\n  const description = formData.get(\"description\");\n  const column_id = Number(formData.get(\"column_id\"));\n  const start_date = formData.get(\"start_date\");\n  const end_date = formData.get(\"end_date\");\n  if (!id || !title || !column_id) {\n    return json({\n      error: \"Missing fields\"\n    }, {\n      status: 400\n    });\n  }\n  const {\n    error\n  } = await supabase.from(\"tasks\").update({\n    title,\n    description,\n    column_id,\n    start_date,\n    end_date\n  }).eq(\"id\", id);\n  if (error) {\n    console.error(error);\n    return json({\n      error: \"Failed to update task\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/\"); // Reload page to show updated tasks\n}\nexport default function Index() {\n  _s();\n  const {\n    columns,\n    tasks\n  } = useLoaderData();\n  const [selectedTask, setSelectedTask] = useState(null);\n  useEffect(() => {\n    console.log(\"Selected task is:\", selectedTask);\n  }, [selectedTask]);\n  return <div className=\"flex justify-center gap-6 p-6\">\r\n      {columns.map(column => <div key={column.id} className=\"w-72 min-h-[300px] bg-gray-100 dark:bg-gray-800 p-4 rounded-xl shadow-lg\">\r\n          <h3 className=\"text-center font-semibold text-lg mb-4\">{column.title}</h3>\r\n          <ul className=\"space-y-4\">\r\n          {tasks.filter(task => task.column_id === column.id).map(task => <Column key={task.id} task={task} onClick={setSelectedTask} />)}\r\n          </ul>\r\n        </div>)}\r\n\r\n    {selectedTask && <TaskModal task={selectedTask} columns={columns} // <-- pass columns here\n    onClose={() => setSelectedTask(null)} />}\r\n    </div>;\n}\n_s(Index, \"NmaEFh75TXzDW2y1Dg6SFyjvwio=\", false, function () {\n  return [useLoaderData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\Column.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\Column.tsx\");\n  import.meta.hot.lastModified = \"1745792337341.867\";\n}\n// REMIX HMR END\n\nexport default function Column({\n  task,\n  onClick\n}) {\n  return <li onClick={() => onClick(task)} className=\"cursor-pointer p-3 bg-gray-200 dark:bg-gray-700 rounded-lg shadow\">\r\n      <strong className=\"block text-gray-900 dark:text-white\">{task.title}</strong>\r\n      <p className=\"text-gray-600 dark:text-gray-300 text-sm\">{task.description}</p>\r\n    </li>;\n}\n_c = Column;\nvar _c;\n$RefreshReg$(_c, \"Column\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\components\\\\\\\\TaskModal.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\components\\\\TaskModal.tsx\");\n  import.meta.hot.lastModified = \"1745793360677.0984\";\n}\n// REMIX HMR END\n\n// import { Task } from \"~/routes/_index\";\n\n// interface TaskModalProps {\n//   task: Task | null;\n//   onClose: () => void;\n// }\n\n// export default function TaskModal({ task, onClose }: TaskModalProps) {\n//   if (!task) return null;\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n//       <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl w-96\">\n//         <h2 className=\"text-xl font-semibold mb-4\">{task.title}</h2>\n//         <p className=\"text-gray-700 dark:text-gray-300 mb-4\">{task.description}</p>\n//         <button onClick={onClose} className=\"mt-4 px-4 py-2 bg-blue-600 text-white rounded\">\n//           Close\n//         </button>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { useState } from \"react\";\nimport { useFetcher } from \"@remix-run/react\";\nexport default function TaskModal({\n  task,\n  columns,\n  onClose\n}) {\n  _s();\n  const [title, setTitle] = useState(task.title);\n  const [description, setDescription] = useState(task.description);\n  const [columnId, setColumnId] = useState(task.column_id);\n  const [startDate, setStartDate] = useState(task.start_date);\n  const [endDate, setEndDate] = useState(task.end_date);\n  const fetcher = useFetcher();\n  function handleSave() {\n    const formData = new FormData();\n    formData.append(\"id\", task.id.toString());\n    formData.append(\"title\", title);\n    formData.append(\"description\", description);\n    formData.append(\"column_id\", columnId.toString());\n    formData.append(\"start_date\", startDate ?? \"\");\n    formData.append(\"end_date\", endDate ?? \"\");\n    fetcher.submit(formData, {\n      method: \"POST\",\n      action: \"/\" // or action: \".\", if you're already inside the _index route\n    });\n    // For now just log the updated task\n    console.log({\n      id: task.id,\n      title,\n      description,\n      column_id: columnId,\n      start_date: startDate,\n      end_date: endDate\n    });\n    onClose();\n  }\n  return <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg w-full max-w-md space-y-4 shadow-xl\">\r\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-4\">Edit Task</h2>\r\n\r\n        <div className=\"space-y-2\">\r\n          <label className=\"block text-gray-700 dark:text-gray-300 text-sm font-medium\">Title</label>\r\n          <input className=\"w-full p-2 border rounded bg-gray-100 dark:bg-gray-700 dark:text-white\" value={title} onChange={e => setTitle(e.target.value)} />\r\n\r\n          <label className=\"block text-gray-700 dark:text-gray-300 text-sm font-medium\">Description</label>\r\n          <textarea className=\"w-full p-2 border rounded bg-gray-100 dark:bg-gray-700 dark:text-white\" value={description} onChange={e => setDescription(e.target.value)} />\r\n\r\n          <label className=\"block text-gray-700 dark:text-gray-300 text-sm font-medium\">Column</label>\r\n          <select className=\"w-full p-2 border rounded bg-gray-100 dark:bg-gray-700 dark:text-white\" value={columnId} onChange={e => setColumnId(Number(e.target.value))}>\r\n            {columns.map(col => <option key={col.id} value={col.id}>\r\n                {col.title}\r\n              </option>)}\r\n          </select>\r\n\r\n          <label className=\"block text-gray-700 dark:text-gray-300 text-sm font-medium\">Start Date</label>\r\n          <input type=\"date\" className=\"w-full p-2 border rounded bg-gray-100 dark:bg-gray-700 dark:text-white\" value={task.start_date ? task.start_date.split('T')[0] : ''} onChange={e => setStartDate(e.target.value)} />\r\n\r\n          <label className=\"block text-gray-700 dark:text-gray-300 text-sm font-medium\">End Date</label>\r\n          <input type=\"date\" className=\"w-full p-2 border rounded bg-gray-100 dark:bg-gray-700 dark:text-white\" value={task.end_date ? task.end_date.split('T')[0] : ''} onChange={e => setEndDate(e.target.value)} />\r\n        </div>\r\n\r\n        <div className=\"flex justify-end space-x-2 mt-4\">\r\n          <button className=\"px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-white rounded\" onClick={onClose}>\r\n            Cancel\r\n          </button>\r\n          <button className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\" onClick={handleSave}>\r\n            Save\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>;\n}\n_s(TaskModal, \"UlfwuIIVNnSOoQFbsp9eGqG1m+c=\", false, function () {\n  return [useFetcher];\n});\n_c = TaskModal;\nvar _c;\n$RefreshReg$(_c, \"TaskModal\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
